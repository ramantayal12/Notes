services:
  spring-boot-app:
    build:
      context: /Users/rtayal/Documents/GitHub/scheduler
      dockerfile: Dockerfile
      args:
        JAR_FILE: scheduler-server.jar
    container_name: my-spring-boot-app
    ports:
      - "8080:8080"
      - "7085:7085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/testdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: userpass

      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 60s

  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: user
      MYSQL_PASSWORD: userpass
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: bitnami/kafka:latest # This will pull the latest stable Apache Kafka version, which is 4.0.x or newer, supporting KRaft by default.
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092" # External port for clients
    environment:
      KAFKA_CFG_NODE_ID: 0 # Unique ID for this node in the KRaft cluster
      KAFKA_CFG_PROCESS_ROLES: controller,broker # This node acts as both controller and broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093 # PLAINTEXT for client, CONTROLLER for KRaft
      # IMPORTANT: Advertised listeners for external connectivity.
      # Use `host.docker.internal` on macOS/Windows for host access from container,
      # or your machine's IP. `localhost` works on Linux.
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # For a single-node KRaft cluster, the quorum voters include itself.
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # A unique ID for the KRaft cluster. Generate this once and keep it.
      # You can generate a UUID with 'kafka-storage.sh random-uuid' from inside a Kafka container.
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv" # REPLACE THIS WITH A REAL UUID FOR PRODUCTION
      # Allows plaintext listeners for development purposes. For production, use SSL/SASL.
      ALLOW_PLAINTEXT_LISTENER: "yes"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give Kafka sufficient time to initialize in KRaft mode

  # Optional: Kafka UI for easier management
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy